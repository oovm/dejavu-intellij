{
    parserClass = "djv.intellij.language.parser.DjvParser"
    parserUtilClass = "com.intellij.lang.parser.GeneratedParserUtilBase"

    psiClassPrefix = "Djv"
    psiImplClassSuffix = "Node"
    psiPackage = "djv.intellij.language.psi"
    psiImplPackage = "djv.intellij.language.psi_node"

    elementTypeHolderClass = "djv.intellij.language.psi.DjvTypes"
    elementTypeClass = "djv.intellij.language.psi.DjvElementType"
    tokenTypeClass = "djv.intellij.language.psi.DjvElementType"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"
    psiImplUtilClass = "djv.intellij.language.psi_node.DjvPsiExtension"

    tokens = [
        AS = "as"

        PARENTHESIS_L = '('
        PARENTHESIS_R = ')'
        BRACKET_L = '['
        BRACKET_R = ']'
        BRACE_L = '{'
        BRACE_R = '}'
        ACCENT = '^'
        ANGLE_L = '<'
        ANGLE_R = '>'
        QUOTATION = '"'
        ESCAPE = '\'
        TAGGED = '<-'
        TO = '->'

        SOFT_CONNECT = '~'
        CHOOSE='|'

        EQ = '='
        SAHA_TEXT = "<TEXT>"
        SLOT_L = '{%'
        SLOT_R = '%}'
        COLON = ':'
        SEMICOLON = ';'
        COMMA = ','
        DOLLAR = '$'
        DOT = '.'
        AT = '@'
        HYPHEN = '-'
        NOT='!'
        OPTIONAL='?'
        MANY1 = '+'
        MANY = '*'
    ]
}

DejaVu ::= statements*;
// fake used for mixin
// pri used for syntax highlight
fake comment_doc ::= COMMENT_DOC;
private comment ::= COMMENT_LINE | COMMENT_BLOCK | COMMENT_DOC;

private statements ::=
      slot_for
    | slot_expression
    | text_statement
    ;
// ---------------------------------------------------------------------------------------------------------------------
// text is not surrounded by `{%   %}`
text_statement ::= SAHA_TEXT;
// ---------------------------------------------------------------------------------------------------------------------
// {% slot %}
slot_for ::= slot_for_start statements* slot_for_else? slot_for_end {
    pin = slot_for_start
};
slot_for_start ::= slot_start kw_for kw_in slot_end;
slot_for_else  ::= slot_else statements*;
slot_for_end   ::= slot_start kw_end_for slot_end;

kw_for     ::= "for";
kw_in      ::= "in";
kw_else    ::= "for";
kw_end_for ::= "end-for" | "end";
// ---------------------------------------------------------------------------------------------------------------------
slot_else ::= slot_start kw_else slot_end;
// ---------------------------------------------------------------------------------------------------------------------
// {% slot %}
slot_expression ::= slot_start identifier? slot_end {
    pin = slot_start
};
slot_start ::= SLOT_L;
slot_end ::= SLOT_R;
// ---------------------------------------------------------------------------------------------------------------------
// @import
export_statement ::= "codegen" identifier object {
    pin = identifier
    recoverWhile = end_brace
}
import_statement ::= kw_import string_literal [import_body] {
    pin = string_literal
    recoverWhile = end_brace
}
import_body      ::= BRACE_L [identifier (COMMA identifier)* [COMMA]] BRACE_R;
kw_import        ::= "import" | "use" | "using";
// ---------------------------------------------------------------------------------------------------------------------
// @macro("path")
macro_statement ::= AT SYMBOL <<parenthesis macro_arg COMMA>>;
macro_arg ::= value | macro_statement;
// =====================================================================================================================
// def modifiers rule
rule_statement ::= define modifiers identifier [rule_argument] [rule_type] rule_body {
    pin = identifier
    recoverWhile = end_brace
};
rule_body     ::= BRACE_L [CHOOSE] [expr] BRACE_R;
rule_argument ::= PARENTHESIS_L PARENTHESIS_R;
rule_type     ::= (COLON | ARROW) identifier;
define ::= "def" | "class" | "struct" | "rule" | "enum" | "union" | "function" | "fun";
expr ::= term (infix term | term)*;
term ::= (prefix)* atom (suffix)*
atom ::= '(' [CHOOSE] expr ')' | field_mark | branch_mark | function_call | value;
infix ::= CHOOSE | SOFT_CONNECT;
prefix ::= ACCENT;
suffix ::= OPTIONAL | MANY | MANY1;
// ---------------------------------------------------------------------------------------------------------------------
branch_mark ::= HASH identifier;
field_mark ::= identifier COLON field_rhs;
field_rhs  ::= identifier | charset | string_literal;
// ---------------------------------------------------------------------------------------------------------------------
// @function("path")
function_call ::= AT identifier <<parenthesis expr COMMA>>;
// ---------------------------------------------------------------------------------------------------------------------
macro_call  ::= HASH identifier;
// ---------------------------------------------------------------------------------------------------------------------
value ::= NULL | BOOLEAN | num | string_literal | table | namespace | charset;
type_hint ::= identifier;
number_suffix ::= identifier;
charset ::= REGEX_RANGE;
// ---------------------------------------------------------------------------------------------------------------------
pair ::= symbol_path eq value;
symbol_path ::= key (DOT key)*
key ::= string_literal | key_symbol | INTEGER;
private eq ::= EQ | COLON;
key_symbol ::= SYMBOL;
// ---------------------------------------------------------------------------------------------------------------------
private num ::= [SIGN] (INTEGER | DECIMAL) [number_suffix] | [SIGN] BYTE;
// ---------------------------------------------------------------------------------------------------------------------
string_literal ::= esc | STRING_SQ char* STRING_SQ | STRING_DQ char* STRING_DQ;
private char ::= CHARACTER | esc;
private esc ::= ESCAPE_UNICODE | ESCAPE_SPECIAL;
// ---------------------------------------------------------------------------------------------------------------------
table ::= [type_hint] <<paired table_inner>>;
private table_inner ::= [table_item (COMMA table_item)* [COMMA]];
private table_item ::= pair | value;
// ---------------------------------------------------------------------------------------------------------------------
object ::= BRACE_L (object_item [COMMA|SEMICOLON])* BRACE_R
object_item ::= object_key COLON value;
object_key ::= identifier | string_literal;
// ---------------------------------------------------------------------------------------------------------------------
modifiers ::= (identifier !('('|'{'|ARROW|':'))*;
namespace ::= identifier (DOUBLE_COLON identifier)*
identifier ::= SYMBOL {
    mixin = "djv.intellij.language.mixin.MixinIdentifier"
}
// ---------------------------------------------------------------------------------------------------------------------
meta parenthesis ::= PARENTHESIS_L [<<item>> (<<delimiter>> <<item>>)* [<<delimiter>>]] PARENTHESIS_R;

private meta paired ::=
    PARENTHESIS_L <<param>> PARENTHESIS_R
  | BRACKET_L <<param>> BRACKET_R
  | BRACE_L <<param>> BRACE_R
