/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package saha.intellij.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static saha.intellij.language.psi.SahaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SahaLexer.flex</tt>
 */
public class _SahaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int StringSQ = 2;
  public static final int StringDQ = 4;
  public static final int Regex = 6;
  public static final int RegexRange = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\5\0\1\15\1\16\1"+
    "\15\2\17\1\20\3\17\1\20\71\17\1\21\1\17\1\22\1\0\1\23\1\24\2\0\16\25\1\26"+
    "\1\27\1\30\1\31\2\17\1\32\11\17\1\33\21\17\1\34\1\35\24\17\1\36\3\17\1\20"+
    "\1\37\1\36\4\17\1\0\1\40\4\25\1\41\1\42\1\0\3\17\2\43\3\0\1\25\1\44\5\17\1"+
    "\45\3\25\1\46\1\47\13\17\1\50\1\51\1\52\1\53\1\25\1\54\2\0\1\55\3\17\3\25"+
    "\1\56\12\17\1\57\1\25\1\60\1\0\1\25\1\61\3\17\1\45\1\62\1\15\2\17\1\57\1\63"+
    "\1\64\1\65\2\0\3\17\1\66\10\0\2\17\1\26\1\67\2\0\1\70\1\25\1\71\3\25\1\72"+
    "\6\17\1\73\2\25\1\74\1\17\1\75\1\25\1\36\1\17\1\76\1\77\1\100\2\17\1\101\1"+
    "\102\1\103\1\51\1\104\1\105\1\106\1\75\1\25\1\22\1\0\1\107\1\110\1\100\2\17"+
    "\1\101\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\25\1\120\1\0\1\107\1\33"+
    "\1\32\2\17\1\101\1\121\1\103\1\41\1\122\1\123\1\0\1\75\1\25\1\0\1\37\1\107"+
    "\1\77\1\100\2\17\1\101\1\121\1\103\1\51\1\114\1\117\1\106\1\75\1\25\1\37\1"+
    "\0\1\124\1\125\1\126\1\127\1\130\1\125\1\17\1\131\1\132\1\133\1\134\1\0\1"+
    "\117\1\25\2\0\1\135\1\26\1\101\2\17\1\101\1\17\1\136\1\137\1\133\1\140\1\43"+
    "\1\75\1\25\2\0\1\76\1\26\1\101\2\17\1\101\1\141\1\103\1\137\1\133\1\140\1"+
    "\142\1\75\1\25\1\143\1\0\1\107\1\26\1\101\4\17\1\144\1\137\1\145\1\146\1\147"+
    "\1\75\1\25\1\0\1\35\1\150\1\17\1\20\1\35\2\17\1\32\1\151\1\20\1\152\1\153"+
    "\1\25\1\117\1\25\1\154\1\0\1\36\5\17\1\155\1\44\1\156\1\157\1\25\1\160\4\0"+
    "\1\161\1\162\1\163\1\36\1\164\1\165\1\155\1\166\1\167\1\170\1\25\1\171\4\0"+
    "\1\123\2\0\1\160\1\25\1\160\1\172\1\173\1\17\1\36\3\17\1\23\1\40\1\25\1\137"+
    "\1\174\1\25\1\40\3\25\1\175\1\176\7\0\5\17\1\45\1\25\1\177\1\25\1\160\1\57"+
    "\1\200\1\201\1\202\1\203\1\17\1\204\1\205\1\25\1\170\4\17\1\33\1\206\5\17"+
    "\1\207\51\17\1\126\1\20\1\126\5\17\1\126\4\17\1\126\1\20\1\126\1\17\1\20\7"+
    "\17\1\126\10\17\1\210\1\0\1\40\1\160\1\0\2\17\2\0\12\17\2\67\1\36\114\17\1"+
    "\77\2\17\1\36\2\17\1\43\11\17\1\125\1\17\1\123\1\17\1\26\1\211\1\0\2\17\1"+
    "\211\1\0\2\17\1\212\1\0\1\17\1\26\1\213\1\0\6\17\1\214\3\25\1\215\1\216\1"+
    "\25\1\160\3\0\1\217\1\25\1\160\13\17\1\0\5\17\1\220\10\17\1\67\1\0\3\17\1"+
    "\20\1\25\1\221\1\25\1\221\1\117\1\25\3\17\1\67\1\23\1\0\5\17\1\222\3\17\1"+
    "\22\1\25\1\44\4\0\2\17\1\156\1\221\6\17\1\174\1\157\3\25\1\51\1\25\1\160\1"+
    "\25\1\160\1\147\1\0\1\25\1\170\10\0\1\223\5\17\1\214\1\25\1\223\1\222\1\25"+
    "\1\160\1\0\1\224\1\221\1\0\1\225\3\17\1\74\1\202\1\25\1\61\4\17\1\57\1\25"+
    "\1\221\1\0\4\17\1\214\2\25\1\0\1\25\1\226\1\25\1\61\3\17\1\67\1\17\1\123\10"+
    "\0\1\227\2\25\1\230\1\231\1\160\30\17\6\25\1\170\1\224\42\17\2\67\4\17\2\67"+
    "\1\17\1\232\3\17\1\67\6\17\1\26\1\167\1\233\1\23\1\234\1\222\1\17\1\23\1\233"+
    "\1\23\7\0\1\105\1\235\1\0\1\236\3\0\1\37\1\147\2\0\1\17\1\23\6\0\1\25\1\175"+
    "\1\237\1\25\1\235\1\0\1\240\1\35\1\151\1\67\1\24\1\101\1\17\1\241\1\242\1"+
    "\243\2\0\5\17\1\123\116\0\5\17\1\20\5\17\1\20\20\17\1\23\1\244\1\245\1\0\4"+
    "\17\1\33\1\206\7\17\1\147\1\0\1\105\2\17\1\20\1\0\10\20\4\25\1\242\3\0\1\36"+
    "\1\204\1\246\1\23\1\36\11\17\1\20\1\247\1\36\12\17\1\207\1\242\4\17\1\67\1"+
    "\36\12\17\1\20\2\0\3\17\1\43\6\0\170\17\1\67\11\0\72\17\1\67\5\0\21\17\1\23"+
    "\10\0\5\17\1\67\41\17\1\23\2\17\1\25\1\245\2\0\5\17\1\156\1\70\1\250\3\17"+
    "\1\57\12\17\1\160\3\0\1\147\1\17\1\35\14\17\1\100\3\17\1\20\1\17\7\0\1\147"+
    "\1\17\1\251\1\252\2\17\1\45\3\0\6\17\1\222\1\0\1\61\5\17\1\214\1\25\1\170"+
    "\1\0\1\25\1\160\2\25\1\61\1\253\1\25\1\61\2\17\1\57\1\170\2\17\1\156\1\25"+
    "\1\221\1\0\3\17\1\23\1\72\5\17\1\45\1\25\1\235\1\147\1\25\1\160\1\254\1\17"+
    "\1\25\1\255\5\17\1\74\1\157\1\0\1\252\1\256\1\25\1\160\2\17\1\20\1\257\6\17"+
    "\1\201\1\260\1\220\2\0\1\261\1\17\1\45\1\262\1\0\3\263\1\0\2\20\5\17\1\207"+
    "\1\67\1\0\16\17\1\45\1\264\1\25\1\160\64\17\1\222\1\0\2\17\1\20\1\265\5\17"+
    "\1\222\40\0\55\17\1\67\15\17\1\22\4\0\1\20\1\0\1\265\1\266\1\17\1\101\1\20"+
    "\1\167\1\267\15\17\1\22\3\0\1\265\20\17\1\67\1\163\32\17\1\67\2\0\10\17\1"+
    "\35\6\17\5\0\1\17\1\22\2\25\2\0\2\25\1\270\2\0\1\271\4\0\1\272\1\232\17\17"+
    "\1\23\2\0\1\25\1\160\1\36\2\17\1\273\1\36\2\17\1\43\1\274\6\17\1\57\3\17\1"+
    "\20\3\35\1\275\4\0\1\17\1\141\2\17\1\20\2\17\1\276\1\17\1\67\1\17\1\67\4\0"+
    "\17\17\1\43\10\0\6\17\1\23\20\0\1\277\20\0\3\17\1\23\6\17\1\123\1\0\1\235"+
    "\3\0\4\17\2\0\3\17\1\43\4\17\1\57\1\44\3\17\1\67\4\17\1\222\1\17\1\246\5\0"+
    "\23\17\1\67\1\25\1\160\4\17\1\222\4\17\1\222\5\17\1\0\6\17\1\222\23\0\46\17"+
    "\1\20\1\0\2\17\1\67\1\0\1\17\23\0\1\67\1\101\4\17\1\33\1\300\2\17\1\67\1\0"+
    "\2\17\1\20\1\0\3\17\1\20\10\0\2\17\1\301\1\0\2\17\1\67\1\0\3\17\1\22\10\0"+
    "\7\17\1\274\10\0\1\302\1\70\1\141\1\36\2\17\1\222\1\113\4\0\3\17\1\23\3\17"+
    "\1\23\4\0\1\17\1\36\2\17\1\303\3\0\6\17\1\67\1\0\2\17\1\67\1\0\2\17\1\43\1"+
    "\0\2\17\1\22\15\0\11\17\1\123\6\0\6\17\1\43\1\0\6\17\1\43\41\0\1\225\6\17"+
    "\1\25\1\157\3\0\1\117\1\25\1\0\1\105\1\225\5\17\1\25\1\44\2\0\3\17\1\123\1"+
    "\25\1\160\1\225\3\17\1\156\1\25\1\137\1\25\2\0\4\17\1\304\1\0\1\225\5\17\1"+
    "\45\1\25\1\305\1\306\1\25\1\307\4\0\2\17\1\32\2\17\1\214\1\25\1\176\10\0\1"+
    "\20\1\310\1\17\1\33\1\17\1\123\5\17\1\156\1\25\1\44\1\25\1\160\1\135\1\77"+
    "\1\100\2\17\1\101\1\121\1\103\1\51\1\114\1\134\1\242\1\75\2\175\21\0\6\17"+
    "\1\174\1\25\1\177\1\43\1\25\1\160\4\0\6\17\2\25\1\311\1\0\1\25\1\160\24\0"+
    "\5\17\1\156\1\170\1\25\1\235\2\0\1\256\4\0\6\17\2\25\1\312\1\0\1\25\1\160"+
    "\4\0\5\17\1\45\1\25\1\0\1\25\1\160\6\0\3\17\1\313\1\25\1\221\1\25\1\160\54"+
    "\0\10\17\1\25\1\160\1\0\1\147\70\0\7\17\1\123\40\0\1\17\1\101\3\17\1\156\1"+
    "\157\1\25\1\123\1\0\1\25\1\160\2\0\1\35\3\17\1\314\2\25\1\40\1\157\51\0\63"+
    "\17\1\22\14\0\15\17\1\20\2\0\30\17\1\222\27\0\5\17\1\20\72\0\10\17\1\20\67"+
    "\0\7\17\1\123\3\17\1\20\1\25\1\160\14\0\3\17\1\67\1\175\1\0\6\17\1\157\1\0"+
    "\1\222\1\0\1\25\1\160\1\265\2\17\1\242\2\17\56\0\10\17\1\23\1\0\1\74\4\25"+
    "\1\157\1\0\1\105\1\225\1\17\10\0\1\123\3\0\75\17\1\23\2\0\36\17\1\43\41\0"+
    "\1\22\77\0\15\17\1\43\1\17\1\23\1\17\1\123\1\17\1\315\130\0\1\271\1\316\1"+
    "\44\1\224\1\317\1\221\3\0\1\320\22\0\1\306\67\0\12\17\1\26\10\17\1\26\1\321"+
    "\1\322\1\17\1\323\1\141\7\17\1\33\1\324\2\26\3\17\1\325\1\167\1\35\1\101\51"+
    "\17\1\67\3\17\1\101\2\17\1\207\3\17\1\207\2\17\1\26\3\17\1\26\2\17\1\20\3"+
    "\17\1\20\3\17\1\101\3\17\1\101\2\17\1\207\1\326\14\25\1\157\1\224\5\25\1\175"+
    "\1\277\1\0\1\236\2\0\1\224\1\40\1\25\52\0\1\157\2\25\1\327\1\330\1\44\72\0"+
    "\30\17\1\23\1\0\1\157\5\0\10\17\1\214\1\44\1\25\1\160\24\0\1\141\3\17\1\161"+
    "\1\36\1\207\1\331\1\240\1\332\1\161\1\232\1\161\2\207\1\116\1\17\1\32\1\17"+
    "\1\222\1\333\1\32\1\17\1\222\50\0\32\17\1\20\5\0\106\17\1\23\1\0\33\17\1\67"+
    "\120\17\1\22\53\0\3\17\1\67\134\0\36\25\2\0");

  /* The ZZ_CMAP_A table has 1760 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\40\1\60\1\35\1\55\1\41\1\0\1\57\1\42\1\43\1\1\1\25\1\50\1\37\1\23"+
    "\1\0\1\15\11\20\1\46\1\47\1\45\1\36\1\44\1\56\1\51\1\17\1\21\2\17\1\24\1\21"+
    "\10\13\1\16\5\13\1\33\2\13\1\16\2\13\1\26\1\27\1\32\1\52\1\22\1\0\1\7\1\21"+
    "\2\17\1\5\1\6\5\13\1\10\1\13\1\12\1\16\2\13\1\3\1\11\1\2\1\4\2\13\1\31\2\13"+
    "\1\34\1\54\1\30\1\53\3\0\1\13\12\0\1\13\1\0\1\14\17\13\1\0\2\13\4\0\4\13\6"+
    "\0\5\13\7\0\1\13\1\0\1\13\1\0\10\14\5\13\1\0\2\13\3\0\3\13\1\0\1\13\6\0\1"+
    "\13\1\14\3\13\1\0\1\13\1\0\4\13\1\0\13\13\1\0\3\13\1\0\5\14\2\0\6\13\1\0\7"+
    "\13\1\0\1\13\7\0\15\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0\1\14\3\13\5\0\3\14\5"+
    "\0\3\13\7\14\4\0\2\13\1\14\13\13\1\0\1\13\7\14\2\0\6\14\2\13\2\14\1\0\4\14"+
    "\2\13\2\14\3\13\2\0\2\13\1\14\6\13\3\14\2\0\11\13\3\14\1\13\6\0\2\14\6\13"+
    "\4\14\2\13\2\0\2\14\1\13\11\14\1\13\3\14\1\13\5\14\2\0\1\13\3\14\4\0\6\13"+
    "\6\0\6\14\1\0\11\14\6\13\3\14\1\13\2\14\1\13\7\14\2\13\2\14\2\0\2\14\1\13"+
    "\3\14\1\0\10\13\2\0\2\13\2\0\6\13\1\0\7\13\1\0\1\13\3\0\4\13\2\0\1\14\1\13"+
    "\3\14\2\0\3\14\1\13\10\0\1\14\4\0\2\13\1\0\1\13\1\0\3\14\1\0\6\13\4\0\2\13"+
    "\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\14\1\0\5\14\4\0\2\14\2\0\3\14\3\0\1\14\7"+
    "\0\4\13\1\0\1\13\7\0\4\14\3\13\1\14\2\0\1\13\1\0\2\13\1\0\3\13\2\14\1\0\3"+
    "\14\2\0\1\13\11\0\1\14\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13\1"+
    "\0\2\13\3\0\2\13\3\0\2\13\4\0\5\14\3\0\3\14\1\0\4\14\2\0\1\13\6\0\5\14\1\0"+
    "\5\13\3\0\1\13\7\14\1\0\2\14\5\0\2\14\1\0\4\13\1\0\3\13\6\0\1\13\2\0\2\13"+
    "\5\0\3\13\2\0\1\13\3\14\1\0\4\14\1\13\5\0\3\13\1\14\7\0\1\13\2\0\2\14\1\0"+
    "\7\13\1\0\1\13\4\0\1\14\4\0\6\14\1\0\1\14\3\0\2\14\4\0\1\13\1\14\1\13\5\14"+
    "\7\13\10\14\1\0\2\14\7\0\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13\1\0\3\13\2\14\1\0\2\14\1\13\2\0\5\13"+
    "\1\0\1\13\1\0\6\14\2\0\2\14\2\0\4\13\5\0\1\14\1\0\1\14\1\0\1\14\4\0\2\14\5"+
    "\13\10\14\11\0\1\14\1\0\7\14\1\13\2\14\4\13\3\14\1\13\3\14\2\13\7\14\3\13"+
    "\4\14\5\13\14\14\1\13\1\14\5\0\1\13\2\0\3\13\1\0\7\13\2\0\3\14\2\13\3\14\3"+
    "\0\2\13\2\14\4\0\1\13\1\0\2\14\4\0\4\13\10\14\3\0\1\13\4\0\1\13\1\14\5\0\3"+
    "\14\2\0\1\13\1\14\1\13\5\0\4\14\4\0\4\13\4\0\5\14\3\13\3\0\10\14\5\13\2\14"+
    "\3\0\3\13\3\14\1\0\5\14\4\13\1\14\4\13\3\14\2\13\2\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\2\0\3\13\1\0\6\13\2\0\2\13\1\14\13\0\1\14\4\0\1\14\3\0\3\14\2\0"+
    "\1\13\4\0\3\13\2\0\4\13\5\0\5\13\4\0\1\13\4\0\4\13\3\14\2\13\5\0\5\13\3\0"+
    "\2\14\2\0\3\13\6\14\1\0\3\13\1\14\3\13\1\14\4\13\1\14\4\13\3\0\1\13\1\0\1"+
    "\13\2\0\5\13\1\14\2\13\2\14\5\13\1\0\4\13\2\14\4\0\1\13\3\14\2\13\1\14\5\13"+
    "\2\14\3\0\3\13\4\0\3\13\2\14\2\0\6\13\1\0\3\14\1\0\2\14\5\0\5\13\5\0\1\13"+
    "\1\14\3\13\1\0\2\13\1\0\2\13\3\0\2\14\10\0\3\14\1\0\1\13\1\0\1\13\3\0\4\13"+
    "\4\0\1\14\6\0\2\13\2\0\3\13\3\0\3\13\1\0\2\13\1\0\1\13\5\0\1\14\2\0\1\13\3"+
    "\0\1\13\2\0\4\13\1\0\2\13\2\0\1\13\3\14\1\0\2\14\1\0\5\13\2\14\1\0\3\13\1"+
    "\14\2\0\1\13\1\0\1\14\4\13\5\0\3\14\3\0\2\14\1\13\1\0\1\13\3\0\1\13\1\0\4"+
    "\13\1\0\1\13\4\14\2\13\1\0\1\13\1\14\3\0\1\13\3\0\2\13\3\0\3\14\2\0\6\14\2"+
    "\13\3\0\2\14\1\0\2\14\3\0\6\14\2\0\3\14\2\0\4\14\4\0\1\13\2\0\2\13\2\0\4\13"+
    "\1\0\4\13\1\0\1\13\1\0\6\13\2\0\5\13\1\0\4\13\1\0\4\13\2\0\3\14\2\0\7\14\1"+
    "\0\2\14\1\0\2\14\1\0\1\13\1\0\1\13\5\0\1\13\1\0\1\13\1\0\3\13\1\0\3\13\1\0"+
    "\3\13");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\4\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\1\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\1\1\40\1\41\3\3\2\0\1\42\1\4"+
    "\1\42\1\43\4\0\1\15\1\44\1\0\1\45\1\46"+
    "\1\47\3\3\1\50\7\0\1\51\1\42\1\52\5\0"+
    "\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\304\0\304\0\u024c"+
    "\0\304\0\u027d\0\u02ae\0\304\0\u02df\0\u0310\0\304\0\u0341"+
    "\0\304\0\304\0\304\0\304\0\u0372\0\304\0\304\0\u027d"+
    "\0\u027d\0\304\0\304\0\u027d\0\304\0\304\0\304\0\304"+
    "\0\u024c\0\304\0\304\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\304\0\u052b\0\u055c\0\u058d\0\u027d"+
    "\0\304\0\u05be\0\u05ef\0\304\0\304\0\304\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u0126\0\u0715\0\304\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u0341\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\3\10\1\11\3\10\1\12\1\10"+
    "\1\5\1\13\2\10\1\14\2\10\1\15\1\10\1\16"+
    "\1\17\1\20\1\21\1\10\1\22\1\10\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\27\50\1\51\27\50\1\52\30\50"+
    "\1\51\30\50\1\53\61\5\63\0\1\10\1\54\17\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\27\0\21\10"+
    "\1\0\1\10\4\0\1\10\1\0\1\10\27\0\5\10"+
    "\1\55\13\10\1\0\1\10\4\0\1\10\1\0\1\10"+
    "\27\0\2\10\1\56\16\10\1\0\1\10\4\0\1\10"+
    "\1\0\1\10\33\0\1\57\6\0\1\60\1\57\1\0"+
    "\1\60\1\57\1\0\1\61\5\0\1\57\44\0\1\14"+
    "\2\0\1\14\1\0\1\62\1\61\52\0\1\63\2\0"+
    "\1\63\40\0\4\64\1\65\24\64\1\66\1\64\1\67"+
    "\25\64\32\0\1\70\3\0\1\71\12\0\2\70\2\0"+
    "\1\70\44\0\1\72\56\0\1\73\65\0\1\74\44\0"+
    "\1\75\76\0\1\76\14\0\2\10\1\77\16\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\27\0\6\10\1\100"+
    "\12\10\1\0\1\10\4\0\1\10\1\0\1\10\27\0"+
    "\6\10\1\101\12\10\1\0\1\10\4\0\1\10\1\0"+
    "\1\10\32\0\3\102\5\0\1\102\1\0\3\102\2\0"+
    "\1\102\51\0\1\60\2\0\1\60\2\0\1\61\36\0"+
    "\1\103\13\0\1\61\2\0\1\61\55\0\1\62\2\0"+
    "\1\62\1\0\1\62\43\0\1\104\7\0\1\63\2\0"+
    "\1\63\3\0\1\104\41\0\3\105\5\0\1\105\1\0"+
    "\3\105\2\0\1\105\41\0\3\106\5\0\1\106\1\0"+
    "\3\106\2\0\1\106\70\0\1\107\62\0\1\110\44\0"+
    "\1\111\40\0\3\10\1\112\15\10\1\0\1\10\4\0"+
    "\1\10\1\0\1\10\27\0\7\10\1\77\11\10\1\0"+
    "\1\10\4\0\1\10\1\0\1\10\27\0\6\10\1\112"+
    "\12\10\1\0\1\10\4\0\1\10\1\0\1\10\32\0"+
    "\3\102\5\0\1\102\1\0\4\102\1\0\1\102\35\0"+
    "\1\104\74\0\1\113\2\0\1\113\45\0\3\66\5\0"+
    "\1\66\1\0\3\66\2\0\1\66\41\0\3\114\5\0"+
    "\1\114\1\0\3\114\2\0\1\114\41\0\3\115\5\0"+
    "\1\115\1\0\3\115\2\0\1\115\73\0\1\116\61\0"+
    "\1\117\25\0\3\115\5\0\1\115\1\0\3\115\2\0"+
    "\1\115\3\0\1\114\52\0\1\120\77\0\1\121\57\0"+
    "\1\122\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2303];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\7\1\2\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\4\11\1\1\2\11\2\1\2\11"+
    "\1\1\4\11\1\1\2\11\3\1\2\0\3\1\1\11"+
    "\4\0\1\11\1\1\1\0\3\11\4\1\7\0\2\1"+
    "\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public _SahaLexer() {
	this((java.io.Reader)null);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SahaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 43: break;
          case 2: 
            { return MANY;
            } 
            // fall through
          case 44: break;
          case 3: 
            { return SYMBOL;
            } 
            // fall through
          case 45: break;
          case 4: 
            { return INTEGER;
            } 
            // fall through
          case 46: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 47: break;
          case 6: 
            { return MANY1;
            } 
            // fall through
          case 48: break;
          case 7: 
            { return BRACKET_L;
            } 
            // fall through
          case 49: break;
          case 8: 
            { return ESCAPE;
            } 
            // fall through
          case 50: break;
          case 9: 
            { return BRACE_R;
            } 
            // fall through
          case 51: break;
          case 10: 
            { return BRACKET_R;
            } 
            // fall through
          case 52: break;
          case 11: 
            { return BRACE_L;
            } 
            // fall through
          case 53: break;
          case 12: 
            { return HASH;
            } 
            // fall through
          case 54: break;
          case 13: 
            { return EQ;
            } 
            // fall through
          case 55: break;
          case 14: 
            { return HYPHEN;
            } 
            // fall through
          case 56: break;
          case 15: 
            { return NOT;
            } 
            // fall through
          case 57: break;
          case 16: 
            { return PARENTHESIS_L;
            } 
            // fall through
          case 58: break;
          case 17: 
            { return PARENTHESIS_R;
            } 
            // fall through
          case 59: break;
          case 18: 
            { return ANGLE_R;
            } 
            // fall through
          case 60: break;
          case 19: 
            { return ANGLE_L;
            } 
            // fall through
          case 61: break;
          case 20: 
            { return COLON;
            } 
            // fall through
          case 62: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 63: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 64: break;
          case 23: 
            { return AT;
            } 
            // fall through
          case 65: break;
          case 24: 
            { return ACCENT;
            } 
            // fall through
          case 66: break;
          case 25: 
            { return SOFT_CONNECT;
            } 
            // fall through
          case 67: break;
          case 26: 
            { return CHOOSE;
            } 
            // fall through
          case 68: break;
          case 27: 
            { return DOLLAR;
            } 
            // fall through
          case 69: break;
          case 28: 
            { return OPTIONAL;
            } 
            // fall through
          case 70: break;
          case 29: 
            { yybegin(StringSQ);return STRING_SQ;
            } 
            // fall through
          case 71: break;
          case 30: 
            { yybegin(StringDQ);return STRING_DQ;
            } 
            // fall through
          case 72: break;
          case 31: 
            { return CHARACTER;
            } 
            // fall through
          case 73: break;
          case 32: 
            { yybegin(YYINITIAL);return STRING_SQ;
            } 
            // fall through
          case 74: break;
          case 33: 
            { yybegin(YYINITIAL);return STRING_DQ;
            } 
            // fall through
          case 75: break;
          case 34: 
            { return DECIMAL;
            } 
            // fall through
          case 76: break;
          case 35: 
            { return ESCAPE_SPECIAL;
            } 
            // fall through
          case 77: break;
          case 36: 
            { return SLOT_L;
            } 
            // fall through
          case 78: break;
          case 37: 
            { return ARROW;
            } 
            // fall through
          case 79: break;
          case 38: 
            { return SLOT_R;
            } 
            // fall through
          case 80: break;
          case 39: 
            { return DOUBLE_COLON;
            } 
            // fall through
          case 81: break;
          case 40: 
            { return BYTE;
            } 
            // fall through
          case 82: break;
          case 41: 
            { return BOOLEAN;
            } 
            // fall through
          case 83: break;
          case 42: 
            { return ESCAPE_UNICODE;
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
